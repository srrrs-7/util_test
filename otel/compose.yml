services:
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector/config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "8889:8889" # Prometheus metrics
    depends_on:
      - loki
      - tempo
      - prometheus
      - jaeger

  # Grafana Loki
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config.yaml:/etc/loki/local-config.yaml

  # Grafana Tempo
  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./tempo/config.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200" # Tempo HTTP
      - "14317:4317" # OTLP gRPC receiver
      - "14318:4318" # OTLP HTTP receiver

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger HTTP receiver
      - "6831:6831/udp" # Jaeger agent UDP
      - "6832:6832/udp" # Jaeger agent UDP
      - "5778:5778" # Jaeger agent HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config.yaml:/etc/prometheus/prometheus.yml

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana

  # Example Go Microservice 1 (uncomment when you have the application)
  # app1:
  #   build:
  #     context: ./apps/service1
  #     dockerfile: Dockerfile
  #   environment:
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #     - SERVICE_NAME=service1
  #   depends_on:
  #     - otel-collector

  # Example Go Microservice 2 (uncomment when you have the application)
  # app2:
  #   build:
  #     context: ./apps/service2
  #     dockerfile: Dockerfile
  #   environment:
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
  #     - SERVICE_NAME=service2
  #   depends_on:
  #     - otel-collector

volumes:
  grafana-data:
