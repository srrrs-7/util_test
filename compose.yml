services:
  surreal:
    image: surrealdb/surrealdb:latest
    ports:
      - "8000:8000"
    environment:
      SURREALDB_USER: root
      SURREALDB_PASS: root
    restart: always
    command: start --log trace --auth --user root --pass root
  surql:
    build:
      dockerfile: ./.images/surql.Dockerfile
    environment:
      SURREALDB_USER: root
      SURREALDB_PASS: root
      SURREALDB_ENDPOINT: http://surreal:8000
    volumes:
      - ./surrealdb:/surrealdb

  mysql:
    build:
      dockerfile: ./.images/mysql.Dockerfile
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: test
    restart: always
    volumes:
      - ./mysql/init/init.sql:/mysql/init/init.sql

  postgres:
    build:
      dockerfile: ./.images/pg.Dockerfile
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: test
    restart: always
    volumes:
      - ./postgres/init:/postgres/init

  rds:
    image: redis:latest
    ports:
      - 6379:6379

  mongo:
    image: mongo:latest
    ports:
      - 27017:27017
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - ./mongo/data:/data/db
      - ./mongo/init:/mongo/init

  redash:
    image: redash/redash:latest
    platform: linux/amd64
    restart: always
    ports:
      - 5005:5000
    depends_on:
      - redash-pg
      - rds
    environment:
      REDASH_DATABASE_URL: postgresql://root:root@redash-pg:5432/redash
      REDASH_REDIS_URL: redis://rds:6379
      REDASH_COOKIE_SECRET: secret
      REDASH_SECRET_KEY: secret
  redash-scheduler:
    image: redash/redash:latest
    platform: linux/amd64
    depends_on:
      - redash
    environment:
      REDASH_DATABASE_URL: postgresql://root:root@redash-pg:5432/redash
      REDASH_REDIS_URL: redis://rds:6379
      QUEUES: celery
      WORKERS_COUNT: 1
  redash-worker:
    image: redash/redash:latest
    platform: linux/amd64
    depends_on:
      - redash
    environment:
      REDASH_DATABASE_URL: postgresql://root:root@redash-pg:5432/redash
      REDASH_REDIS_URL: redis://rds:6379
      QUEUES: celery
      WORKERS_COUNT: 1
  redash-pg:
    build:
      dockerfile: ./.images/pg.Dockerfile
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: redash
    restart: always
    volumes:
      - ./postgres/init:/postgres/init

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    environment:
      node.name: elasticsearch
      discovery.type: single-node
      cluster.name: es-docker-cluster
      ES_JAVA_OPTS: -Xms4096m -Xmx4096m
      xpack.security.enabled: false
      http.port: 9200
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.1.0
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200

  sqs:
    image: softwaremill/elasticmq
    ports:
      - 9324:9324
      - 9325:9325

  goapi:
    build:
      dockerfile: ./goapi/.images/api.Dockerfile
    ports:
      - 8080:8080
    environment:
      MODE: debug # debug or release
      API_PORT: :8080
      DB_URL: root:root@tcp(mysql:3306)/test?charset=utf8mb4&parseTime=True&loc=Local
      CACHE_URL: rds:6379
      CACHE_TTL: 3600
      CACHE_PREFIX: GOAPI
      SQS_URL: http://sqs:9324/000000000000/test
      AWS_ACCESS_KEY_ID: access # local env
      AWS_SECRET_ACCESS_KEY: secret # local env
      DEFAULT_REGION: region # local env

  goworker:
    build:
      dockerfile: ./goapi/.images/worker.Dockerfile
    environment:
      MODE: debug # debug or release
      API_PORT: :8080
      DB_URL: root:root@tcp(mysql:3306)/test?charset=utf8mb4&parseTime=True&loc=Local
      CACHE_URL: rds:6379
      CACHE_TTL: 3600
      CACHE_PREFIX: GOAPI
      SQS_URL: http://sqs:9324/000000000000/test
      AWS_ACCESS_KEY_ID: access # local env
      AWS_SECRET_ACCESS_KEY: secret # local env
      DEFAULT_REGION: region # local env

  gopher:
    image: golang:1.23.0
    working_dir: /go/src
    volumes:
      - ./go/src:/go/src
      - ./goapi/src:/go/goapi/src

  rust:
    image: rust:latest
    platform: linux/arm64
    volumes:
      - ./rust:/rust
      - ./wasm:/wasm

  node:
    image: node:latest
    working_dir: /node
    volumes:
      - ./node:/node

  deno:
    image: denoland/deno:latest
    volumes:
      - ./deno:/deno
      - ./wasm:/wasm
    ports:
      - 4507:4507

  bun:
    build:
      dockerfile: ./.images/bun.Dockerfile
    ports:
      - 3000:3000

  php:
    image: php:latest
    working_dir: /php
    volumes:
      - ./php:/php

  linux:
    image: ubuntu:latest

  k3s:
    image: rancher/k3s
    command:
      - server
      - token create
    volumes:
      - ./k3s:/k3s
      - ./k3s/rancher/k3s.yaml:/etc/rancher/k3s/k3s.yaml
      - /sys/fs/cgroup:/sys/fs/cgroup:rw

  k6:
    image: grafana/k6:master-with-browser
    volumes:
      - ./k6:/k6

  plantuml:
    image: plantuml/plantuml-server
    ports:
      - 8080:8080

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./observer/prometheus/config.yml:/etc/prometheus/prometheus.yml
      - ./observer/prometheus/data:/prometheus

  grafana:
    image: grafana/grafana-enterprise
    ports:
      - 3011:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./observer/grafana/data:/var/lib/grafana

  loki: # collect logs
    image: grafana/loki:latest
    ports:
      - 3100:3100

  tempo: # collect trace
    image: grafana/tempo:latest
    ports:
      - 3200:3200
    environment:
      - TEMPO_STORAGE_TYPE=local # local file storage
    volumes:
      - ./observer/tempo/config.yml:/etc/tempo.yml

  otel-collector:
    image: otel/opentelemetry-collector-contrib
    ports:
      - 4317:4317 # otlp/gRPC
      - 4318:4318 # otlp/http
      - 14268:14268 # Jaeger Thrift receiver
      - 55681:55681 # otlp/http
    volumes:
      - ./observer/otel-collector/config.yaml:/etc/otel/config.yaml
    command: ["--config=/etc/otel/config.yaml"]

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # Jaeger Agent

  vector:
    image: timberio/vector:latest-alpine
    ports:
      - 5044:5044 # Expose Vector's log input port
      - 8664:8664 # Expose Vector's internal metrics
      - 8686:8686 # browser
    volumes:
      - ./observer/vector/config.yaml:/etc/vector/vector.yaml

  aws:
    image: amazon/aws-cli
    environment:
      AWS_DEFAULT_REGION: ap-northeast-1
      AWS_DEFAULT_OUTPUT: json
      AWS_ACCESS_KEY_ID: aws_access_key
      AWS_SECRET_ACCESS_KEY: aws_secret_access_key

  redoc:
    build:
      dockerfile: ./.images/redoc.Dockerfile
    ports:
      - 80:80
    volumes:
      - ./redoc:/app
