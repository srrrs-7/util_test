// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: queue.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnqueueService_Enqueue_FullMethodName = "/Queue.EnqueueService/Enqueue"
)

// EnqueueServiceClient is the client API for EnqueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnqueueServiceClient interface {
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error)
}

type enqueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnqueueServiceClient(cc grpc.ClientConnInterface) EnqueueServiceClient {
	return &enqueueServiceClient{cc}
}

func (c *enqueueServiceClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*EnqueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnqueueResponse)
	err := c.cc.Invoke(ctx, EnqueueService_Enqueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnqueueServiceServer is the server API for EnqueueService service.
// All implementations must embed UnimplementedEnqueueServiceServer
// for forward compatibility.
type EnqueueServiceServer interface {
	Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error)
	mustEmbedUnimplementedEnqueueServiceServer()
}

// UnimplementedEnqueueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnqueueServiceServer struct{}

func (UnimplementedEnqueueServiceServer) Enqueue(context.Context, *EnqueueRequest) (*EnqueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedEnqueueServiceServer) mustEmbedUnimplementedEnqueueServiceServer() {}
func (UnimplementedEnqueueServiceServer) testEmbeddedByValue()                        {}

// UnsafeEnqueueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnqueueServiceServer will
// result in compilation errors.
type UnsafeEnqueueServiceServer interface {
	mustEmbedUnimplementedEnqueueServiceServer()
}

func RegisterEnqueueServiceServer(s grpc.ServiceRegistrar, srv EnqueueServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnqueueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnqueueService_ServiceDesc, srv)
}

func _EnqueueService_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnqueueServiceServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnqueueService_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnqueueServiceServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnqueueService_ServiceDesc is the grpc.ServiceDesc for EnqueueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnqueueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Queue.EnqueueService",
	HandlerType: (*EnqueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _EnqueueService_Enqueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}

const (
	DequeueService_Dequeue_FullMethodName = "/Queue.DequeueService/Dequeue"
)

// DequeueServiceClient is the client API for DequeueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DequeueServiceClient interface {
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error)
}

type dequeueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDequeueServiceClient(cc grpc.ClientConnInterface) DequeueServiceClient {
	return &dequeueServiceClient{cc}
}

func (c *dequeueServiceClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*DequeueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DequeueResponse)
	err := c.cc.Invoke(ctx, DequeueService_Dequeue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DequeueServiceServer is the server API for DequeueService service.
// All implementations must embed UnimplementedDequeueServiceServer
// for forward compatibility.
type DequeueServiceServer interface {
	Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error)
	mustEmbedUnimplementedDequeueServiceServer()
}

// UnimplementedDequeueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDequeueServiceServer struct{}

func (UnimplementedDequeueServiceServer) Dequeue(context.Context, *DequeueRequest) (*DequeueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedDequeueServiceServer) mustEmbedUnimplementedDequeueServiceServer() {}
func (UnimplementedDequeueServiceServer) testEmbeddedByValue()                        {}

// UnsafeDequeueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DequeueServiceServer will
// result in compilation errors.
type UnsafeDequeueServiceServer interface {
	mustEmbedUnimplementedDequeueServiceServer()
}

func RegisterDequeueServiceServer(s grpc.ServiceRegistrar, srv DequeueServiceServer) {
	// If the following call pancis, it indicates UnimplementedDequeueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DequeueService_ServiceDesc, srv)
}

func _DequeueService_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DequeueServiceServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DequeueService_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DequeueServiceServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DequeueService_ServiceDesc is the grpc.ServiceDesc for DequeueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DequeueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Queue.DequeueService",
	HandlerType: (*DequeueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dequeue",
			Handler:    _DequeueService_Dequeue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}

const (
	QueueStatusService_GetQueueStatus_FullMethodName = "/Queue.QueueStatusService/GetQueueStatus"
)

// QueueStatusServiceClient is the client API for QueueStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueStatusServiceClient interface {
	GetQueueStatus(ctx context.Context, in *QueueStatusRequest, opts ...grpc.CallOption) (*QueueStatusResponse, error)
}

type queueStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueStatusServiceClient(cc grpc.ClientConnInterface) QueueStatusServiceClient {
	return &queueStatusServiceClient{cc}
}

func (c *queueStatusServiceClient) GetQueueStatus(ctx context.Context, in *QueueStatusRequest, opts ...grpc.CallOption) (*QueueStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueStatusResponse)
	err := c.cc.Invoke(ctx, QueueStatusService_GetQueueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueStatusServiceServer is the server API for QueueStatusService service.
// All implementations must embed UnimplementedQueueStatusServiceServer
// for forward compatibility.
type QueueStatusServiceServer interface {
	GetQueueStatus(context.Context, *QueueStatusRequest) (*QueueStatusResponse, error)
	mustEmbedUnimplementedQueueStatusServiceServer()
}

// UnimplementedQueueStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueueStatusServiceServer struct{}

func (UnimplementedQueueStatusServiceServer) GetQueueStatus(context.Context, *QueueStatusRequest) (*QueueStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStatus not implemented")
}
func (UnimplementedQueueStatusServiceServer) mustEmbedUnimplementedQueueStatusServiceServer() {}
func (UnimplementedQueueStatusServiceServer) testEmbeddedByValue()                            {}

// UnsafeQueueStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueStatusServiceServer will
// result in compilation errors.
type UnsafeQueueStatusServiceServer interface {
	mustEmbedUnimplementedQueueStatusServiceServer()
}

func RegisterQueueStatusServiceServer(s grpc.ServiceRegistrar, srv QueueStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueueStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueueStatusService_ServiceDesc, srv)
}

func _QueueStatusService_GetQueueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueStatusServiceServer).GetQueueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueStatusService_GetQueueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueStatusServiceServer).GetQueueStatus(ctx, req.(*QueueStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueStatusService_ServiceDesc is the grpc.ServiceDesc for QueueStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Queue.QueueStatusService",
	HandlerType: (*QueueStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQueueStatus",
			Handler:    _QueueStatusService_GetQueueStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue.proto",
}
